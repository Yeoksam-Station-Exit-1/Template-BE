# Github Action의 이름 설정
name: Publish Image on Docker Hub

# Action의 Trigger 설정
on:
  push:
    branches:
      - main

# 직렬 또는 병렬적으로 실행할 작업의 집합
jobs:
  # 작업의 이름
  build:
    # 작업 실행 환경 이미지 설정
    runs-on: ubuntu-latest

    # 실행할 명령들을 순서에 맞게 나열
    steps:
      # 현재 프로젝트로 작업영역 설정
      - name: Checkout
        uses: actions/checkout@v3

      # Github Action Market에 등록된 Java 환경 설정
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "11"
          cache: "gradle"

      # Gradle Dependency 캐싱
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 빌드 명령어 실행
      - run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew clean build

      # Release 브랜치 이름에서 버전 정보 추출
      - name: 버전 정보 추출
        run: echo "##[set-output name=version;]$(echo '${{ github.event.head_commit.message }}' | egrep -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')"
        id: extract_version_name

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          username: tprogramer
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          # platforms: linux/amd64
          tags: |
            tprogramer/my-container-test:latest
            tprogramer/my-container-test:${{ steps.extract_version_name.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
